{"version":3,"file":"functions.js","mappings":"yBAuIAA,gBAAgBC,UAAU,OA9HnB,SAAaC,EAAOC,GACzB,OAAOD,EAAQC,CACjB,IA6HAH,gBAAgBC,UAAU,SAtHnB,SAAeG,GACpB,IAAMC,EAAQC,aAAY,WACxB,IAAMC,GAcD,IAAIC,MAAOC,qBAbhBL,EAAWM,UAAUH,EACvB,GAAG,KAEHH,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IA8GAL,gBAAgBC,UAAU,aA9FnB,SAAmBY,EAAaT,GACrC,IAAIU,EAAS,EACPT,EAAQC,aAAY,WACxBQ,GAAUD,EACVT,EAAWM,UAAUI,EACvB,GAAG,KAEHV,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IAqFAL,gBAAgBC,UAAU,OA7EnB,SAAoBc,GAGzB,OAFAC,QAAQC,IAAIF,GAELA,CACT,IA0EAf,gBAAgBC,UAAU,eA7DnB,SAAqBiB,GAG1B,IAFA,IACIC,EADEC,EAAS,IAAIC,UAAUH,GAASI,EAAIC,KAAKC,KAAKN,GAC7CO,EAAMP,EAAS,EAAI,CAAC,CAAC,IAAM,GAC1BQ,EAAI,EAAGA,EAAIR,EAAQQ,GAAK,EAC5B,IAAIN,EAAQM,KACDD,EAAIE,KAAK,CAACD,IACPA,GAAKJ,GACH,IAAI,IAAIM,EAAIF,GAAIP,EAAIO,EAAIE,GAAKV,EAAQU,GAAK,EAAGR,EAAQD,GAAK,EAIhF,OAAOM,CACP,G","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["/* global clearInterval, console, setInterval */\n\n/**\n * Add two numbers\n * @customfunction\n * @param {number} first First number\n * @param {number} second Second number\n * @returns {number} The sum of the two numbers.\n */\nexport function add(first, second) {\n  return first + second;\n}\n\n/**\n * Displays the current time once a second\n * @customfunction\n * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom function invocation\n */\nexport function clock(invocation) {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time\n * @returns {string} String with the current time formatted for the current locale.\n */\nexport function currentTime() {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param {number} incrementBy Amount to increment\n * @param {CustomFunctions.StreamingInvocation<number>} invocation\n */\nexport function increment(incrementBy, invocation) {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param {string} message String to write.\n * @returns String to write.\n */\nexport function logMessage(message) {\n  console.log(message);\n\n  return message;\n}\n\n/*\n生成质数。\n\n */\n\n  /**\n * \n * @customfunction\n * @param {number} target\n* @returns {number[][]} The sum of the two numbers.\n */\nexport function PrintPrimes(target) {\n  const isPrime= new Int8Array(target), m = Math.sqrt(target);\n  let k, res = target > 2 ? [[2]] : [];\n  for(let i = 3; i < target; i += 2) {\n      if(!isPrime[i]) {\n                 res.push([i]);\n                if (i <= m){\n                      for(let j = i; (k = i * j) < target; j += 2) isPrime[k] = 1;\n                }\n      }\n}\nreturn res;\n}\n\n\n/*\n 连接ChatGPT。\n\n */\n\nfunction generateText(promptText) {\n  const url = \"https://api.openai.com/v1/engines/davinci-codex/completions\";\n  const prompt = promptText;\n  const maxTokens = 1024;\n  const temperature = 0.7;\n  const topP = 1;\n  const n = 1;\n\n  const body = JSON.stringify({\n    prompt: prompt,\n    max_tokens: maxTokens,\n    temperature: temperature,\n    top_p: topP,\n    n: n,\n    stream: false,\n  });\n\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    Authorization: \"Bearer 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\",\n  };\n\n  return fetch(url, {\n    method: \"POST\",\n    headers: headers,\n    body: body,\n  })\n    .then((response) => response.json())\n    .then((data) => {\n      return data.choices[0].text;\n    })\n    .catch((error) => {\n      console.error(\"Error:\", error);\n    });\n}\n\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"PRINTPRIMES\", PrintPrimes);"],"names":["CustomFunctions","associate","first","second","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","result","message","console","log","target","k","isPrime","Int8Array","m","Math","sqrt","res","i","push","j"],"sourceRoot":""}